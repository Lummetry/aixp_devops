---

# - name: Get version of a specific collection
#   shell: ansible-galaxy collection list 'aidamian.aixp_factory'
#   register: collection_version
#   delegate_to: localhost
#   become: false
#   when: inventory_hostname == groups['gpu_workers'][0]


# - name: Show collection version
#   debug:
#     msg: "{{ collection_version.stdout_lines }}"
#   delegate_to: localhost 
#   become: false
#   when: inventory_hostname == groups['gpu_workers'][0]


# - name: Create work folder with subfolder test_deploy
#   file:
#     path: /home/{{ ansible_user }}/work/test_deploy
#     state: directory
#     mode: 0755
#   become: true
#   become_user: "{{ ansible_user }}"
#   when: inventory_hostname in groups['gpu_workers']


# - name: Generate a file based on template in the work folder
#   template:
#     src: "{{ aixp_deployed_template }}.j2"
#     dest: /home/{{ ansible_user }}/work/test_deploy/{{ aixp_target_name }}
#   become: true
#   become_user: "{{ ansible_user }}"
#   when: inventory_hostname in groups['gpu_workers']

# - name: Get the content of the file
#   shell: cat /home/{{ ansible_user }}/work/test_deploy/{{ aixp_target_name }}
#   become: true
#   become_user: "{{ ansible_user }}"
#   when: inventory_hostname in groups['gpu_workers']
#   register: cat_result

# - name: Show the content of the file
#   debug:
#     var: cat_result.stdout_lines
#   when: inventory_hostname in groups['gpu_workers']

# - name: copy .env
#   copy:
#     src: .env
#     dest: /home/{{ ansible_user }}/work/test_deploy/.env
#   become: true
#   become_user: "{{ ansible_user }}"
#   when: inventory_hostname in groups['gpu_workers']

- name: Set the name of the image
  set_fact:
    docker_image_name: "aixpand/exe_eng:{{ aixp_app_version }}"
  when: inventory_hostname in groups['gpu_workers']

- name: Display the name of the image
  debug:
    msg: "Checking/pulling {{ docker_image_name }}"
  when: inventory_hostname in groups['gpu_workers']

- name: "Log in to DockerHub with {{ dockerhub_username }}"
  community.docker.docker_login:
    username: "{{ dockerhub_username }}"
    password: "{{ dockerhub_password }}"
  ignore_errors: true
  when: inventory_hostname in groups['gpu_workers']

- name: Run local role plugin
  my_test_action:
    my_param1: "Hello from role-local plugin"
  when: inventory_hostname in groups['gpu_workers']
  register: my_test_action_result

- name: Display result of local role plugin
  debug:
    msg: "{{ my_test_action_result }}"
  when: inventory_hostname in groups['gpu_workers']

- name: List Docker Images
  community.docker.docker_image_info:
  register: docker_images_pre
  when: inventory_hostname in groups['gpu_workers']

- name: Get each docker image tag
  set_fact:
    docker_image_tags: "{{ docker_image_tags | default([]) + [item.RepoTags[0]] }}"
  loop: "{{ docker_images_pre.images }}"
  when: inventory_hostname in groups['gpu_workers']

- name: Display all Docker Images
  debug:
    var: docker_image_tags    
  when: inventory_hostname in groups['gpu_workers']

- name: Check if the image exists
  set_fact:
    docker_image_exists: "{{ docker_image_name in item }}"
  loop: "{{ docker_image_tags }}"
  when: inventory_hostname in groups['gpu_workers']
 

- name: Display if the image exists
  debug:
    msg: "Image {{ docker_image_name }} exists: {{ docker_image_exists }}"
  when: inventory_hostname in groups['gpu_workers']

- name: Pull Docker Image
  community.docker.docker_image:
    name: "{{ docker_image_name }}"
    source: pull  
  when: 
    - inventory_hostname in groups['gpu_workers']
    - not docker_image_exists

- name: List Docker Images
  community.docker.docker_image_info:
  register: docker_images
  when: 
    - inventory_hostname in groups['gpu_workers']
    - not docker_image_exists

- name: Display all Docker Images
  debug:
    var: docker_images.images    
  when: 
    - inventory_hostname in groups['gpu_workers']
    - not docker_image_exists



