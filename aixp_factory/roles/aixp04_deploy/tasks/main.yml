---
- name: Debug display to check if in config mode or not
  debug:
    msg: "App: {{ aixp_app }}, Debug: {{ aixp_debug_deploy | default(false) }}, Config only: {{ aixp_config_only | default(false) }}"

- name: Check if service exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ aixp_app }}.service"
  register: aixp_service
  when: 
  - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)

- name: Gather service facts
  ansible.builtin.service_facts:

# task for creating aixp_local_cache_folder for volume assignment
- name: "Check if {{ aixp_local_cache_folder }} exists"
  ansible.builtin.stat:
    path: "{{ aixp_local_cache_folder }}"
  register: aixp_local_cache_folder_check
  when: aixp_app in ["aixp_ee", "edge_node"]

- name: "Create {{ aixp_local_cache_folder }}"
  ansible.builtin.file:
    path: "{{ aixp_local_cache_folder }}"
    state: directory
    mode: '0755'
  when: 
    - not aixp_local_cache_folder_check.stat.exists
    - aixp_app in ["aixp_ee", "edge_node"]

# task for adding in aixp_target_folder the .env file from the localhost files
# fails if the .env file is not provided in the files folder of the role
- name: "Check if {{ aixp_base_folder }}/.env file exists"
  ansible.builtin.stat:
    path: "{{ aixp_base_folder }}/.env"
  register: env_file_check
  when: aixp_app in ["aixp_ee", "edge_node"]

- name: Display .env status
  debug:
    msg: ".env exists: {{ env_file_check }} - will be overwritten"
  when: aixp_app in ["aixp_ee", "edge_node"]

- name: "Copy {{ aixp_base_folder }}/.env file"
  ansible.builtin.template:
    src: env.j2
    dest: "{{ aixp_base_folder }}/.env"
    mode: '0644'
    force: true
  when: 
    - aixp_app in ["aixp_ee", "edge_node"]

- name: "Check if config_startup.json exists in {{ aixp_local_cache_folder }}"
  ansible.builtin.stat:
    path: "{{ aixp_local_cache_folder }}/config_startup.json"
  register: config_startup_check
  when: aixp_app in ["aixp_ee", "edge_node"]

- name: Display config_startup.json status
  debug:
    msg: "config_startup.json exists: {{ config_startup_check }}"
  when: aixp_app in ["aixp_ee", "edge_node"]


- name: "Create {{ aixp_local_cache_folder }}/config_startup.json"
  ansible.builtin.template:
    src: config_startup.json.j2
    dest: "{{ aixp_local_cache_folder }}/config_startup.json"
    mode: '0644'
    force: true
  when: 
    - aixp_app in ["aixp_ee", "edge_node"]

- name: "Check if config_app.txt exists in {{ aixp_local_cache_folder }}"
  ansible.builtin.stat:
    path: "{{ aixp_local_cache_folder }}/config_app.txt"
  register: config_app_check
  when: aixp_app in ["aixp_ee", "edge_node"]


- name: Display config_app.txt status
  debug:
    msg: "config_app.txt exists: {{ config_app_check }}"
  when: aixp_app in ["aixp_ee", "edge_node"]

- name: "Creating {{ aixp_local_cache_folder }}/config_app.txt"
  ansible.builtin.template:
    src: config_app.txt.j2
    dest: "{{ aixp_local_cache_folder }}/config_app.txt"
    mode: '0644'
    force: true
  when: 
    - aixp_app in ["aixp_ee", "edge_node"]

- name: "Stop the service {{ aixp_app }}.service if it is running"
  ansible.builtin.systemd:
    name: "{{ aixp_app }}.service"
    enabled: yes
    state: stopped
  failed_when: false
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)



- name: "Create Amd64 /etc/systemd/system/{{ aixp_app }}.service"
  ansible.builtin.template:
    src: aixp_ee.service.j2
    dest: /etc/systemd/system/{{ aixp_app }}.service
    mode: '0644'
    force: true
  notify: reload systemd
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - (aixp_jetson is not defined) or (not aixp_jetson | bool)


- name: "Create Nvidia Jetson /etc/systemd/system/{{ aixp_app }}.service"
  ansible.builtin.template:
    src: aixp_ee_tegra.service.j2
    dest: /etc/systemd/system/{{ aixp_app }}.service
    mode: '0644'
    force: true
  notify: reload systemd
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - (aixp_jetson is defined) and (aixp_jetson | bool)    

# Explicit task to reload systemd
- name: Reload systemd to apply changes
  ansible.builtin.command:
    cmd: systemctl daemon-reload
  become: yes
  when:
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)    


- name: Get service file after creation
  ansible.builtin.shell: cat /etc/systemd/system/{{ aixp_app }}.service
  register: service_file
  when:   
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]

- name: Display service file
  debug:
    msg: "{{ service_file.stdout_lines }}"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]    


# this is a debug-only task
- name: "Mock-create amd64 {{ aixp_base_folder }}/{{ aixp_app }}.service"
  ansible.builtin.template:
    src: "{{ aixp_app }}.service.j2"
    dest: "{{ aixp_base_folder }}/{{ aixp_app }}.service"
    mode: '0644'
    force: true
  when:
  - (aixp_debug_deploy is defined) and (aixp_debug_deploy | bool)
  - (aixp_jetson is not defined) or (not aixp_jetson | bool)

# this is a debug-only task
- name: "Mock-create Nvidia Jetson {{ aixp_base_folder }}/{{ aixp_app }}.service"
  ansible.builtin.template:
    src: "{{ aixp_app }}_tegra.service.j2"
    dest: "{{ aixp_base_folder }}/{{ aixp_app }}.service"
    mode: '0644'
    force: true
  when:
  - (aixp_debug_deploy is defined) and (aixp_debug_deploy | bool)
  - (aixp_jetson is defined) and (aixp_jetson | bool)


- name: Create /etc/docker/daemon.json if aixp_cr_accept_insecure
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: reload docker
  when: 
    # - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_cr_accept_insecure


- name: "Log in to {{ aixp_cr_server }} with {{ dockerhub_username }}"
  ansible.builtin.command:
    cmd: >
      docker login -u {{ dockerhub_username }} -p {{ dockerhub_password }} {{ aixp_cr_server }}
  # community.docker.docker_login:
  #   username: "{{ dockerhub_username }}"
  #   password: "{{ dockerhub_password }}"
  ignore_errors: true
  when:
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)



- name: Set the name of the image
  set_fact:
    docker_image_name: "{{ aixp_cr_url }}/{{ aixp_image }}:{{ aixp_app_version }}"
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]  
    
- name: Display the name of the image
  debug:
    msg: "Pulling {{ docker_image_name }}"
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]  
    

- name: Pull Docker Image
  ansible.builtin.command:
    cmd: >
      docker pull {{ docker_image_name }}
  # community.docker.docker_image:
  #   name: "{{ docker_image_name }}"
  #   source: pull  
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]    
    - not (aixp_config_only | default(false))


- name: List Docker Images
  ansible.builtin.command:
    cmd: >
      docker images
  # community.docker.docker_image_info:
  register: docker_images
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]    

- name: Display all Docker Images
  debug:
    var: docker_images.images    
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]    


## Additional file creating tasks: create show and restart scripts
- name: Create show.sh script
  ansible.builtin.template:
    src: show.sh.j2
    dest: "~/show.sh"
    mode: '0755'
    force: true
  become: false

- name: Create restart.sh script
  ansible.builtin.copy:
    dest: "~/restart.sh"
    content: |
      #!/bin/bash
      sudo systemctl enable {{ aixp_app }}
      sudo systemctl restart {{ aixp_app }}
      sudo journalctl -u {{ aixp_app }} -a -n 100 -f
    mode: '0755'
    force: true
  become: false

- name: Create stop.sh script
  ansible.builtin.copy:
    dest: "~/stop.sh"
    content: |
      #!/bin/bash
      sudo systemctl stop {{ aixp_app }}
    mode: '0755'
    force: true
  become: false


- name: "Copy the MQTT server certificate file if defined. aixp_MQTT_CERT: {{ aixp_MQTT_CERT }}"
  ansible.builtin.copy:
    src: "{{ aixp_MQTT_CERT }}"
    dest: "{{ aixp_local_cache_folder }}/mqtt.crt"
    mode: '0644'
  when: 
    - aixp_MQTT_CERT is not none
    - aixp_app in ["aixp_ee", "edge_node"]


- name: Debug show MQTT certificate file value if defined
  debug:
    msg: "MQTT certificate file: {{ './_local_cache/mqtt.cert' if aixp_MQTT_CERT is not none else '' }}"
  when: 
    - aixp_MQTT_CERT is not none
    - aixp_app in ["aixp_ee", "edge_node"]


- name: "Create  {{ aixp_local_cache_folder }}/authorized_addrs file and add the authorized addresses"
  ansible.builtin.copy:
    dest: "{{ aixp_local_cache_folder }}/authorized_addrs"
    content: "{{ aixp_authorized_addrs }}"
    mode: '0644'
    force: true
  when: 
    - aixp_app in ["aixp_ee", "edge_node"]


# Now check the status of the service

- name: Set a varible as service name
  set_fact:
    aixp_service_name: "{{ aixp_app }}.service"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]

- name: Checking services
  ansible.builtin.service_facts:
  when: 
    - aixp_app in ["aixp_ee", "edge_node"]


- name: Set aix_service_status based on the service status
  set_fact:
    aix_service_status: "{{ ansible_facts.services[aixp_service_name] }}"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]

- name: Show service status
  debug:
    msg: "{{ aixp_service_name }}: {{ aix_service_status }}"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]


- name: Enable and start service
  ansible.builtin.systemd:
    name: "{{ aixp_app }}.service"
    enabled: yes
    state: started
  notify: reload systemd
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    # - not aixp_service.stat.exists or not (aixp_service_name in services and services[aixp_service_name].status == 'active')


  ### LMS part ONLY for aixp_ee

- name: Set the name of the LMS image
  set_fact:
    docker_lms_image_name: "{{ aixp_cr_url }}/{{ aixp_lms_image | default('hyfy_lms') }}:{{ aixp_app_version }}"
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]  
    
- name: Display the name of the LMS image
  debug:
    msg: "Pulling  {{ docker_lms_image_name }}"
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]  


- name: Pull LMS Docker Image
  ansible.builtin.command:
    cmd: >
      docker pull {{ docker_lms_image_name }}
  # community.docker.docker_image:
  #   name: "{{ docker_image_name }}"
  #   source: pull  
  when: 
    - inventory_hostname in groups['gpu_workers']
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]    
    - (aixp_lms_enabled is defined) and (aixp_lms_enabled | bool | default(false))
    - not (aixp_config_only | default(false))

- name: Set a varible as service name for LMS
  set_fact:
    aixp_lms_service_name: "{{ aixp_lms_image }}.service"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]
    - (aixp_lms_enabled is defined) and (aixp_lms_enabled | bool | default(false))

- name: Checking services
  ansible.builtin.service_facts:
  when: 
    - aixp_app in ["aixp_ee"]

- name: "Create /etc/systemd/system/{{ aixp_lms_service_name }}"
  ansible.builtin.template:
    src: hyfy_lms.service.j2
    dest: "/etc/systemd/system/{{ aixp_lms_service_name }}"
    mode: '0644'
    force: true
  notify: reload systemd
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]
    - (aixp_lms_enabled is defined) and (aixp_lms_enabled | bool | default(false))

- name: Enable and start service
  ansible.builtin.systemd:
    name: "{{ aixp_lms_service_name }}"
    enabled: yes
    state: started
  notify: reload systemd
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee"]
    - (aixp_lms_enabled is defined) and (aixp_lms_enabled | bool | default(false))


  ### END LMS

- name: Sleep for 5 seconds and continue with play
  ansible.builtin.wait_for:
    timeout: 5
  delegate_to: localhost
  become: false
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]

- name: "Get journalctl log for {{ aixp_app }} service"
  ansible.builtin.shell: journalctl -u {{ aixp_app }}.service -a -n 100 --no-pager
  register: journalctl_log
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]

- name: "Display journalctl log for {{ aixp_app }} service"
  debug:
    msg: "{{ journalctl_log.stdout_lines }}"
  when: 
    - (aixp_debug_deploy is not defined) or (not aixp_debug_deploy | bool)
    - aixp_app in ["aixp_ee", "edge_node"]







# ### LLM API DEPLOYMENT ###
# # Task to wait for the container to be ready
# - name: Wait for container to be ready
#   wait_for:
#     port: "{{ llm_api_port }}"  # Wait for port 5050 to be ready
#     delay: 20  # Delay before the check starts
#     timeout: 60  # Maximum time to wait
#   when: 
#     - not aixp_debug_deploy | bool
#     - aixp_app in ["llm_api"]

# # Task to check if the API is working
# - name: Check if API is working
#   uri:
#     url: "http://localhost:{{ llm_api_port }}/predict/"  # API endpoint to test
#     method: POST  # HTTP method to use
#     body: '{"text": "Tu esti cam f.r.a.i.e.r"}'  # Request body in JSON format
#     body_format: json  # Specify the format of the body
#     return_content: yes  # Return the content of the response
#     status_code: 200  # Expected status code
#     headers:
#       Content-Type: "application/json"  # Set request header
#   register: api_response  # Store the response in a variable
#   when: 
#     - not aixp_debug_deploy | bool
#     - aixp_app in ["llm_api"]

# - name: Display API response
#   debug:
#     msg: "{{ api_response.json }}"
#   when: 
#     - not aixp_debug_deploy | bool
#     - aixp_app in ["llm_api"]

# # Task to assert that CUDA is being used
# - name: Assert that CUDA is used
#   assert:
#     that:
#       - "'cuda' in api_response.json['metadata']['device']"  # Check if 'cuda' is in the response
#     fail_msg: "CUDA is not being used"  # Message to display if assertion fails
#     success_msg: "CUDA is being used"  # Message to display if assertion succeeds
#   when: 
#     - not aixp_debug_deploy | bool
#     - aixp_app in ["llm_api"]

