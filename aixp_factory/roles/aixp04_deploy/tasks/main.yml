---
- name: Check if service exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/{{ deployed_app }}.service"
  register: aixp_service

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Copy aixp.service file
  ansible.builtin.template:
    src: "{{ deployed_app }}.service.j2"
    dest: /etc/systemd/system/{{ deployed_app }}.service
    mode: '0644'
  when: not aixp_service.stat.exists
  notify: reload systemd

# task for creating aixp_target_folder for volume assignment
- name: Check if aixp_target_folder exists
  ansible.builtin.stat:
    path: "{{ aixp_target_folder }}"
  register: aixp_target_folder_check

- name: Create aixp_target_folder
  ansible.builtin.file:
    path: "{{ aixp_target_folder }}"
    state: directory
    mode: '0755'
  when: not aixp_target_folder_check.stat.exists

# task for adding in aixp_target_folder the .env file from the localhost files
# fails if the .env file is not provided in the files folder of the role
- name: Check if .env file exists
  ansible.builtin.stat:
    path: "{{ aixp_target_folder }}/.env"
  register: env_file_check

- name: Copy .env file
  ansible.builtin.copy:
    src: .env
    dest: "{{ aixp_target_folder }}"
    mode: '0644'
  when: not env_file_check.stat.exists

- name: Enable and start service
  ansible.builtin.systemd:
    name: {{ deployed_app }}.service
    enabled: yes
    state: started
  when: not aixp_service.stat.exists or not ('{{ deployed_app }}.service' in services and services['{{ deployed_app }}.service'].status == 'active')


# Task to wait for the container to be ready
- name: Wait for container to be ready
  wait_for:
    port: "{{ llm_api_port }}"  # Wait for port 5050 to be ready
    delay: 20  # Delay before the check starts
    timeout: 60  # Maximum time to wait
  when: use_demo_llm_api  # Run this task only if the demo API is used

# Task to check if the API is working
- name: Check if API is working
  uri:
    url: "http://localhost:{{ llm_api_port }}/predict/"  # API endpoint to test
    method: POST  # HTTP method to use
    body: '{"text": "Tu esti cam f.r.a.i.e.r"}'  # Request body in JSON format
    body_format: json  # Specify the format of the body
    return_content: yes  # Return the content of the response
    status_code: 200  # Expected status code
    headers:
      Content-Type: "application/json"  # Set request header
  register: api_response  # Store the response in a variable
  when: use_demo_llm_api  # Run this task only if the demo API is used

- name: Display API response
  debug:
    msg: "{{ api_response.json }}"

# Task to assert that CUDA is being used
- name: Assert that CUDA is used
  assert:
    that:
      - "'cuda' in api_response.json['metadata']['device']"  # Check if 'cuda' is in the response
    fail_msg: "CUDA is not being used"  # Message to display if assertion fails
    success_msg: "CUDA is being used"  # Message to display if assertion succeeds
  when: use_demo_llm_api  # Run this task only if the demo API is used
